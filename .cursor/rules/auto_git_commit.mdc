# Automatic Git Commit Rule

This rule specifies that after each feature developed by Cursor IDE, an automatic Git commit should be created following the conventional commit format.

## Rule Details

- **Name**: Automatic Git Commit
- **Type**: Git Integration
- **Scope**: Project-wide
- **Priority**: High

## Requirements

1. After each Cursor IDE change, automatically create a Git commit
2. Commit messages must follow the conventional commit format:
   ```
   type(scope): description

   [optional body]

   [optional footer]
   ```
3. The commit type should be determined based on the nature of the change:
   - `feat`: New feature
   - `fix`: Bug fix
   - `docs`: Documentation changes
   - `style`: Code style changes (formatting, etc.)
   - `refactor`: Code refactoring
   - `perf`: Performance improvements
   - `test`: Adding or modifying tests
   - `chore`: Maintenance tasks
   - `ci`: CI/CD related changes
   - `build`: Build system changes
   - `revert`: Reverting changes

## Implementation

When Cursor IDE makes changes:
1. Stage all modified files
2. Analyze the changes and prompts used to determine:
   - Appropriate commit type
   - Scope of changes
   - Description of changes
3. Generate commit message following conventional format
4. Include relevant details from the prompts in the commit body
5. Execute the commit command

## Example

```bash
# Example commit message structure
feat(api): add user authentication endpoints

Added new API endpoints for user authentication:
- POST /api/auth/login
- POST /api/auth/register
- POST /api/auth/logout

This change was prompted by the requirement to implement user authentication
for the application. The endpoints follow RESTful conventions and include
proper validation and error handling.
```

## Validation

The IDE will enforce this rule by:
1. Automatically detecting when Cursor IDE makes changes
2. Validating commit message format
3. Ensuring all changed files are included in the commit
4. Verifying that the commit message accurately reflects the changes made 