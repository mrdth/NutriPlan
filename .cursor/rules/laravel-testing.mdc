# Laravel Testing Standards

This rule defines the testing standards and best practices for Laravel applications using Pest PHP.

## Rule Details

- **Name**: Laravel Testing Standards
- **Type**: Testing Guidelines
- **Scope**: Test files
- **Priority**: High

## Requirements

1. Test Organization:
   - Place tests in appropriate test directories
   - Use descriptive test names
   - Follow the AAA pattern (Arrange, Act, Assert)
   - Group related tests using test suites
   - Use datasets for multiple test cases

2. Test Types:
   - Write unit tests for isolated components
   - Use feature tests for HTTP endpoints
   - Implement integration tests for complex features
   - Use browser tests for JavaScript-heavy features
   - Write model tests for complex model logic

3. Testing Best Practices:
   - Use factories for test data generation
   - Mock external services and dependencies
   - Use database transactions for database tests
   - Clean up after each test
   - Use meaningful assertions
   - Use Pest's expressive syntax

4. Test Documentation:
   - Write clear test descriptions
   - Document test setup requirements
   - Explain complex test scenarios
   - Use meaningful variable names in tests

## Example

```php
<?php

declare(strict_types=1);

use App\Models\User;
use App\Services\UserService;
use Illuminate\Foundation\Testing\RefreshDatabase;

beforeEach(function () {
    $this->userService = app(UserService::class);
});

test('it can create a user', function () {
    // Arrange
    $userData = [
        'name' => 'John Doe',
        'email' => 'john@example.com',
        'password' => 'password123',
    ];

    // Act
    $user = $this->userService->createUser($userData);

    // Assert
    expect($user)
        ->toBeInstanceOf(User::class)
        ->name->toBe('John Doe')
        ->email->toBe('john@example.com');
});

test('it can update a user', function () {
    // Arrange
    $user = User::factory()->create();
    $updateData = [
        'name' => 'Jane Doe',
    ];

    // Act
    $updatedUser = $this->userService->updateUser($user, $updateData);

    // Assert
    expect($updatedUser)
        ->name->toBe('Jane Doe')
        ->email->toBe($user->email);
});

test('it can delete a user', function () {
    // Arrange
    $user = User::factory()->create();

    // Act
    $this->userService->deleteUser($user);

    // Assert
    expect(User::find($user->id))->toBeNull();
});

test('it validates user data', function () {
    // Arrange
    $invalidData = [
        'name' => '',
        'email' => 'invalid-email',
        'password' => '123', // too short
    ];

    // Act & Assert
    expect(fn () => $this->userService->createUser($invalidData))
        ->toThrow(ValidationException::class);
});

test('it handles user not found', function () {
    // Arrange
    $nonExistentId = 99999;

    // Act & Assert
    expect(fn () => $this->userService->getUserById($nonExistentId))
        ->toThrow(UserNotFoundException::class);
});
```

## Validation

The IDE will enforce these rules by:
1. Validating test class structure
2. Checking for proper test organization
3. Ensuring test documentation completeness
4. Verifying proper use of Pest features 