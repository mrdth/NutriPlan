---
description: Laravel Events Standards
globs: ["app/Events/**/*.php"]
alwaysApply: true
---
# Laravel Events Standards

This rule defines best practices and standards for events and listeners in Laravel applications.

## Rule Details

- **Name**: Laravel Events Standards
- **Type**: Event Guidelines
- **Scope**: Event-related files
- **Priority**: High

## Requirements

1. Event Organization:
   - Use proper event structure
   - Implement proper event handling
   - Use proper event naming
   - Implement proper event dispatching
   - Use proper event queuing
   - Include proper documentation

2. Event Structure:
   - Use proper event classes
   - Implement proper event data
   - Use proper event properties
   - Implement proper event validation
   - Use proper event serialization
   - Include proper event logging

3. Event Implementation:
   - Use proper event listeners
   - Implement proper event subscribers
   - Use proper event middleware
   - Implement proper event broadcasting
   - Use proper event testing
   - Include proper error handling

4. Event Management:
   - Use proper event registration
   - Implement proper event caching
   - Use proper event monitoring
   - Implement proper event logging
   - Use proper event testing
   - Include proper documentation

## Example

```php
<?php

// app/Events/PostCreated.php
<?php

declare(strict_types=1);

namespace App\Events;

use App\Models\Post;
use Illuminate\Broadcasting\Channel;
use Illuminate\Broadcasting\InteractsWithSockets;
use Illuminate\Broadcasting\PresenceChannel;
use Illuminate\Broadcasting\PrivateChannel;
use Illuminate\Contracts\Broadcasting\ShouldBroadcast;
use Illuminate\Foundation\Events\Dispatchable;
use Illuminate\Queue\SerializesModels;

class PostCreated implements ShouldBroadcast
{
    use Dispatchable;
    use InteractsWithSockets;
    use SerializesModels;

    public function __construct(
        public Post $post
    ) {}

    public function broadcastOn(): array
    {
        return [
            new Channel('posts'),
            new PrivateChannel('user.' . $this->post->user_id),
        ];
    }

    public function broadcastAs(): string
    {
        return 'post.created';
    }

    public function broadcastWith(): array
    {
        return [
            'id' => $this->post->id,
            'title' => $this->post->title,
            'user' => [
                'id' => $this->post->user->id,
                'name' => $this->post->user->name,
            ],
        ];
    }
}

// app/Events/PostUpdated.php
<?php

declare(strict_types=1);

namespace App\Events;

use App\Models\Post;
use Illuminate\Foundation\Events\Dispatchable;
use Illuminate\Queue\SerializesModels;

class PostUpdated
{
    use Dispatchable;
    use SerializesModels;

    public function __construct(
        public Post $post,
        public array $changes
    ) {}
}

// app/Events/PostDeleted.php
<?php

declare(strict_types=1);

namespace App\Events;

use App\Models\Post;
use Illuminate\Foundation\Events\Dispatchable;
use Illuminate\Queue\SerializesModels;

class PostDeleted
{
    use Dispatchable;
    use SerializesModels;

    public function __construct(
        public Post $post
    ) {}
}

// app/Listeners/NotifyPostCreated.php
<?php

declare(strict_types=1);

namespace App\Listeners;

use App\Events\PostCreated;
use App\Notifications\PostCreatedNotification;
use Illuminate\Contracts\Queue\ShouldQueue;

class NotifyPostCreated implements ShouldQueue
{
    public function handle(PostCreated $event): void
    {
        $event->post->user->notify(new PostCreatedNotification($event->post));
    }

    public function failed(PostCreated $event, \Throwable $exception): void
    {
        report($exception);
    }
}

// app/Listeners/UpdatePostStats.php
<?php

declare(strict_types=1);

namespace App\Listeners;

use App\Events\PostCreated;
use App\Events\PostDeleted;
use App\Events\PostUpdated;
use Illuminate\Support\Facades\Cache;

class UpdatePostStats
{
    public function handle(PostCreated|PostUpdated|PostDeleted $event): void
    {
        Cache::tags(['posts'])->forget('stats');
    }
}

// app/Subscribers/PostSubscriber.php
<?php

declare(strict_types=1);

namespace App\Subscribers;

use App\Events\PostCreated;
use App\Events\PostDeleted;
use App\Events\PostUpdated;
use Illuminate\Events\Dispatcher;

class PostSubscriber
{
    public function subscribe(Dispatcher $events): array
    {
        return [
            PostCreated::class => [
                'App\Listeners\NotifyPostCreated',
                'App\Listeners\UpdatePostStats',
            ],
            PostUpdated::class => [
                'App\Listeners\UpdatePostStats',
            ],
            PostDeleted::class => [
                'App\Listeners\UpdatePostStats',
            ],
        ];
    }
}

// app/Notifications/PostCreatedNotification.php
<?php

declare(strict_types=1);

namespace App\Notifications;

use App\Models\Post;
use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Notifications\Messages\MailMessage;
use Illuminate\Notifications\Notification;

class PostCreatedNotification extends Notification implements ShouldQueue
{
    use Queueable;

    public function __construct(
        protected Post $post
    ) {}

    public function via(object $notifiable): array
    {
        return ['mail', 'database'];
    }

    public function toMail(object $notifiable): MailMessage
    {
        return (new MailMessage)
            ->subject('New Post Created')
            ->line('Your post has been created successfully.')
            ->action('View Post', url("/posts/{$this->post->id}"))
            ->line('Thank you for using our application!');
    }

    public function toArray(object $notifiable): array
    {
        return [
            'post_id' => $this->post->id,
            'title' => $this->post->title,
        ];
    }
}

// app/Providers/EventServiceProvider.php
<?php

declare(strict_types=1);

namespace App\Providers;

use App\Subscribers\PostSubscriber;
use Illuminate\Foundation\Support\Providers\EventServiceProvider as ServiceProvider;

class EventServiceProvider extends ServiceProvider
{
    protected $subscribe = [
        PostSubscriber::class,
    ];

    public function boot(): void
    {
        //
    }

    public function shouldDiscoverEvents(): bool
    {
        return false;
    }
}
```

## Validation

The IDE will enforce these rules by:
1. Validating event file structure
2. Checking for proper event handling
3. Ensuring proper event registration
4. Verifying proper event documentation 