# Laravel API Standards

This rule defines best practices and standards for API development in Laravel applications.

## Rule Details

- **Name**: Laravel API Standards
- **Type**: API Guidelines
- **Scope**: API-related files
- **Priority**: High

## Requirements

1. API Organization:
   - Use proper API versioning
   - Implement proper API documentation
   - Use proper API routing
   - Implement proper API controllers
   - Use proper API resources
   - Include proper API tests

2. API Structure:
   - Use proper request validation
   - Implement proper response formatting
   - Use proper error handling
   - Implement proper rate limiting
   - Use proper authentication
   - Include proper documentation

3. API Implementation:
   - Use proper HTTP methods
   - Implement proper status codes
   - Use proper response types
   - Implement proper pagination
   - Use proper filtering
   - Include proper sorting

4. API Management:
   - Use proper API versioning
   - Implement proper API monitoring
   - Use proper API logging
   - Implement proper API testing
   - Use proper API documentation
   - Include proper security

## Example

```php
<?php

// routes/api.php
<?php

declare(strict_types=1);

use App\Http\Controllers\Api\V1\PostController;
use Illuminate\Support\Facades\Route;

Route::prefix('v1')->group(function () {
    Route::middleware('auth:sanctum')->group(function () {
        Route::apiResource('posts', PostController::class);
    });
});

// app/Http/Controllers/Api/V1/PostController.php
<?php

declare(strict_types=1);

namespace App\Http\Controllers\Api\V1;

use App\Http\Controllers\Controller;
use App\Http\Requests\Api\V1\PostRequest;
use App\Http\Resources\Api\V1\PostResource;
use App\Models\Post;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Resources\Json\AnonymousResourceCollection;

class PostController extends Controller
{
    public function index(): AnonymousResourceCollection
    {
        $posts = Post::with(['user', 'comments'])
            ->latest()
            ->paginate();

        return PostResource::collection($posts);
    }

    public function store(PostRequest $request): PostResource
    {
        $post = Post::create($request->validated());

        return new PostResource($post);
    }

    public function show(Post $post): PostResource
    {
        return new PostResource($post->load(['user', 'comments']));
    }

    public function update(PostRequest $request, Post $post): PostResource
    {
        $post->update($request->validated());

        return new PostResource($post);
    }

    public function destroy(Post $post): JsonResponse
    {
        $post->delete();

        return response()->json([
            'message' => 'Post deleted successfully',
        ]);
    }
}

// app/Http/Requests/Api/V1/PostRequest.php
<?php

declare(strict_types=1);

namespace App\Http\Requests\Api\V1;

use Illuminate\Foundation\Http\FormRequest;

class PostRequest extends FormRequest
{
    public function authorize(): bool
    {
        return true;
    }

    public function rules(): array
    {
        return [
            'title' => ['required', 'string', 'max:255'],
            'content' => ['required', 'string'],
            'published_at' => ['nullable', 'date'],
        ];
    }
}

// app/Http/Resources/Api/V1/PostResource.php
<?php

declare(strict_types=1);

namespace App\Http\Resources\Api\V1;

use Illuminate\Http\Request;
use Illuminate\Http\Resources\Json\JsonResource;

class PostResource extends JsonResource
{
    public function toArray(Request $request): array
    {
        return [
            'id' => $this->id,
            'title' => $this->title,
            'content' => $this->content,
            'published_at' => $this->published_at,
            'created_at' => $this->created_at,
            'updated_at' => $this->updated_at,
            'user' => new UserResource($this->whenLoaded('user')),
            'comments' => CommentResource::collection($this->whenLoaded('comments')),
        ];
    }
}

// app/Http/Middleware/Api/Authenticate.php
<?php

declare(strict_types=1);

namespace App\Http\Middleware\Api;

use Closure;
use Illuminate\Auth\Middleware\Authenticate as Middleware;
use Illuminate\Http\Request;

class Authenticate extends Middleware
{
    protected function redirectTo(Request $request): ?string
    {
        return null;
    }

    protected function unauthenticated($request, array $guards): void
    {
        abort(response()->json([
            'message' => 'Unauthenticated.',
        ], 401));
    }
}

// app/Exceptions/Handler.php
<?php

declare(strict_types=1);

namespace App\Exceptions;

use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Illuminate\Http\JsonResponse;
use Illuminate\Validation\ValidationException;
use Throwable;

class Handler extends ExceptionHandler
{
    protected $dontReport = [
        //
    ];

    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    public function register(): void
    {
        $this->reportable(function (Throwable $e) {
            //
        });
    }

    protected function invalidJson($request, ValidationException $exception): JsonResponse
    {
        return response()->json([
            'message' => 'The given data was invalid.',
            'errors' => $exception->errors(),
        ], $exception->status);
    }
}

// config/api.php
<?php

declare(strict_types=1);

return [
    'version' => env('API_VERSION', 'v1'),

    'prefix' => env('API_PREFIX', 'api'),

    'middleware' => [
        'api' => [
            \App\Http\Middleware\Api\Authenticate::class,
            \App\Http\Middleware\Api\ThrottleRequests::class,
        ],
    ],

    'throttle' => [
        'enabled' => true,
        'attempts' => 60,
        'decay_minutes' => 1,
    ],
];
```

## Validation

The IDE will enforce these rules by:
1. Validating API file structure
2. Checking for proper API versioning
3. Ensuring proper API documentation
4. Verifying proper API security 