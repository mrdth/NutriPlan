You are an expert in PHP, Laravel, React, Inertia, Pest, and Tailwind.

1. Coding Standards
	•	Use PHP v8.4 features.
	•	Follow pint.json coding rules.
	•	Enforce strict types and array shapes via PHPStan.

2. Project Structure & Architecture
	•	Delete .gitkeep when adding a file.
	•	Avoid DB::; use Model::query() only.
	•	No dependency changes without approval.

2.1 Directory Conventions

app/Http/Requests
	•	Use FormRequest for validation.
	•	Name with Create, Update, Delete.

app/Http/Controllers
	•	Use Controllers pattern and naming verbs.
	•	Controllers should only contain CRUD methods, or be invokable.
		• INDEX
		• SHOW
		• CREATE
		• STORE
		• UPDATE
		• DESTROY
	•	Example:

```php
public function index()
{
    return Inertia::render('Index');
}
```

app/Actions
	•	Use Actions pattern and naming verbs.
	•	Example:

```php
public function store(CreateTodoRequest $request, CreateTodoAction $action)
{
    $user = $request->user();
    $action->handle($user, $request->validated());
}
```

app/Models
	•	Avoid fillable.

database/migrations
	•	Omit down() in new migrations.

3. Testing
	•	Use Pest PHP for all tests.
	•	Run composer lint after changes.
	•	Run composer test before finalizing.
	•	Don’t remove tests without approval.
	•	All code must be tested.
	•	Generate a {Model}Factory with each model.

3.1 Test Directory Structure
	•	Console: tests/Feature/Console
	•	Controllers: tests/Feature/Http
	•	Actions: tests/Unit/Actions
	•	Models: tests/Unit/Models
	•	Jobs: tests/Unit/Jobs

4. Styling & UI
	•	Use Tailwind CSS.
	•	Keep UI minimal.

5. Task Completion Requirements
	•	Follow all rules before marking tasks complete.

# Composer Scripts

This section outlines the available composer scripts in the project, their purposes, and when to use them.

## Testing Scripts

### `composer test:type-coverage`
- **Purpose**: Runs type coverage tests
- **When to use**: To verify type coverage meets minimum requirements
- **What it runs**: Pest with type coverage checking (minimum 100%)

### `composer test:lint`
- **Purpose**: Runs code style checks
- **When to use**: Before committing code to ensure consistent style
- **What it runs**:
  - Laravel Pint (PHP code style)
  - NPM format checking

### `composer test:unit`
- **Purpose**: Runs unit tests
- **When to use**: To verify application functionality
- **What it runs**: Pest with parallel execution and coverage reporting

### `composer test:types`
- **Purpose**: Runs static type analysis
- **When to use**: To catch type-related issues
- **What it runs**: PHPStan analysis

### `composer test:refactor`
- **Purpose**: Checks for potential code refactoring opportunities
- **When to use**: Before major refactoring to identify potential improvements
- **What it runs**: Rector in dry-run mode

### `composer test` or `composer tests`
- **Purpose**: Runs all test suites
- **When to use**: Before deploying or when you want to run all checks
- **What it runs**:
  - Type coverage tests
  - Unit tests
  - Linting
  - Refactoring checks

## Code Quality Scripts

### `composer lint`
- **Purpose**: Formats and lints code
- **When to use**: To automatically fix code style issues
- **What it runs**:
  - Laravel Pint
  - NPM formatting
  - NPM linting

### `composer refactor`
- **Purpose**: Automatically refactors code
- **When to use**: To apply automated code improvements
- **What it runs**: Rector with default rules